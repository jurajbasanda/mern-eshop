{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_REGISTER_SECCESS, USER_REGISTER_FAIL, USER_REGISTER_REQUEST } from '../constants/userConstants';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SECCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SECCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/macbook/Documents/Traversy ProShop Mern tut/propshop/frontend/src/actions/userAction.js"],"names":["axios","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_SECCESS","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","name","USER_LOGIN_SECCESS"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACCC,kBADD,EAECC,kBAFD,EAGCC,eAHD,EAICC,WAJD,EAKCC,qBALD,EAMCC,kBAND,EAOCC,qBAPD,QAQO,4BARP;AAUA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;AAC7D,MAAI;AACHA,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEX;AADE,KAAD,CAAR;AAIA,UAAMY,MAAM,GAAG;AACdC,MAAAA,OAAO,EAAE;AACR,wBAAgB;AADR;AADK,KAAf;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMf,KAAK,CAACgB,IAAN,CAAW,kBAAX,EAA+B;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAA/B,EAAoDG,MAApD,CAAvB;AAEAF,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEV,kBADE;AAERe,MAAAA,OAAO,EAAEF;AAFD,KAAD,CAAR;AAKAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC;AACA,GAnBD,CAmBE,OAAOO,KAAP,EAAc;AACfX,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAET,eADE;AAERc,MAAAA,OAAO,EAAEK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GAAgDF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAApE,GAA8EF,KAAK,CAACE;AAFrF,KAAD,CAAR;AAIA;AACD,CA1BM;AA2BP,OAAO,MAAMC,MAAM,GAAG,MAAOd,QAAD,IAAc;AACzCO,EAAAA,YAAY,CAACQ,UAAb,CAAwB,UAAxB;AACAf,EAAAA,QAAQ,CAAC;AACRC,IAAAA,IAAI,EAAER;AADE,GAAD,CAAR;AAGA,CALM;AAOP,OAAO,MAAMuB,QAAQ,GAAG,CAACC,IAAD,EAAMnB,KAAN,EAAaC,QAAb,KAA0B,MAAOC,QAAP,IAAoB;AACrE,MAAI;AACHA,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEL;AADE,KAAD,CAAR;AAIA,UAAMM,MAAM,GAAG;AACdC,MAAAA,OAAO,EAAE;AACR,wBAAgB;AADR;AADK,KAAf;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMf,KAAK,CAACgB,IAAN,CAAW,YAAX,EAAyB;AAAEY,MAAAA,IAAF;AAAQnB,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAzB,EAAoDG,MAApD,CAAvB;AAEAF,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAGP,qBADC;AAGRY,MAAAA,OAAO,EAAEF;AAHD,KAAD,CAAR;AAKAJ,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAGiB,kBADC;AAGRZ,MAAAA,OAAO,EAAEF;AAHD,KAAD,CAAR;AAMAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC;AACA,GAzBD,CAyBE,OAAOO,KAAP,EAAc;AACfX,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEN,kBADE;AAERW,MAAAA,OAAO,EAAEK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GAAgDF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAApE,GAA8EF,KAAK,CAACE;AAFrF,KAAD,CAAR;AAIA;AACD,CAhCM","sourcesContent":["import axios from 'axios'\nimport {\n\tUSER_LOGIN_REQUEST,\n\tUSER_LOGIN_SUCCESS,\n\tUSER_LOGIN_FAIL,\n\tUSER_LOGOUT,\n\tUSER_REGISTER_SECCESS,\n\tUSER_REGISTER_FAIL,\n\tUSER_REGISTER_REQUEST,\n} from '../constants/userConstants'\n\nexport const login = (email, password) => async (dispatch) => {\n\ttry {\n\t\tdispatch({\n\t\t\ttype: USER_LOGIN_REQUEST,\n\t\t})\n\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t}\n\n\t\tconst { data } = await axios.post('/api/users/login', { email, password }, config)\n\n\t\tdispatch({\n\t\t\ttype: USER_LOGIN_SUCCESS,\n\t\t\tpayload: data,\n\t\t})\n\n\t\tlocalStorage.setItem('userInfo', JSON.stringify(data))\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: USER_LOGIN_FAIL,\n\t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message,\n\t\t})\n\t}\n}\nexport const logout = () => (dispatch) => {\n\tlocalStorage.removeItem('userInfo')\n\tdispatch({\n\t\ttype: USER_LOGOUT,\n\t})\n}\n\nexport const register = (name,email, password) => async (dispatch) => {\n\ttry {\n\t\tdispatch({\n\t\t\ttype: USER_REGISTER_REQUEST,\n\t\t})\n\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t}\n\n\t\tconst { data } = await axios.post('/api/users', { name, email, password }, config)\n\n\t\tdispatch({\n\t\t\ttype: \tUSER_REGISTER_SECCESS,\n      \n\t\t\tpayload: data,\n\t\t})\n\t\tdispatch({\n\t\t\ttype: \tUSER_LOGIN_SECCESS,\n      \n\t\t\tpayload: data,\n\t\t})\n\n\t\tlocalStorage.setItem('userInfo', JSON.stringify(data))\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: USER_REGISTER_FAIL,\n\t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message,\n\t\t})\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}